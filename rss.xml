<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://findn.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Find Notes</title>
    <link>https://findn.cn/</link>
    <description>三水的笔记 - 找到CS笔记的乐趣</description>
    <language>zh-CN</language>
    <pubDate>Wed, 30 Nov 2022 10:32:13 GMT</pubDate>
    <lastBuildDate>Wed, 30 Nov 2022 10:32:13 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>算法</category>
    <item>
      <title>Day4 链表 | LeetCode 24.两两交换链表中的节点 19.删除链表的倒数第N个节点 面试题 02.07. 链表相交 142.环形链表II</title>
      <link>https://findn.cn/algorithm/carl/day4.html</link>
      <guid>https://findn.cn/algorithm/carl/day4.html</guid>
      <source url="https://findn.cn/rss.xml">Day4 链表 | LeetCode 24.两两交换链表中的节点 19.删除链表的倒数第N个节点 面试题 02.07. 链表相交 142.环形链表II</source>
      <description>本文目录 24.两两交换链表中的节点 # 24.两两交换链表中的节点 力扣题目链接 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 输入：head = [1,2,3,4] 输出：[2,1,4,3] 输入：head = [] 输出：[] 输入：head = [1] 输出：[1]</description>
      <category>算法</category>
      <pubDate>Tue, 29 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div>
<p>本文目录</p>
<nav><ul><li><router-link to="#_24-两两交换链表中的节点">24.两两交换链表中的节点</router-link><ul><li><router-link to="#思路">思路</router-link></li><li><router-link to="#python代码">python代码</router-link></li></ul></li><li><router-link to="#_19-删除链表的倒数第-n-个结点">19.删除链表的倒数第 N 个结点</router-link><ul><li><router-link to="#思路-1">思路</router-link></li><li><router-link to="#python代码-1">python代码</router-link></li></ul></li><li><router-link to="#面试题-02-07-链表相交">面试题 02.07. 链表相交</router-link><ul><li><router-link to="#思路-2">思路</router-link></li><li><router-link to="#python代码-2">python代码</router-link></li></ul></li><li><router-link to="#_142-环形链表ii">142.环形链表II</router-link><ul><li><router-link to="#思路-3">思路</router-link></li><li><router-link to="#python代码-3">python代码</router-link></li></ul></li></ul></nav>
</div>
<h2 id="_24-两两交换链表中的节点" tabindex="-1"> 24.两两交换链表中的节点</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<CodeTabs id="16" :data='[{"title":"示例 1："},{"title":"示例 2："},{"title":"示例 3："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2,3,4]
输出：[2,1,4,3]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = []
输出：[]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab2="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1]
输出：[1]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
</CodeTabs>

<h3 id="思路" tabindex="-1"> 思路</h3>
<h3 id="python代码" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_19-删除链表的倒数第-n-个结点" tabindex="-1"> 19.删除链表的倒数第 N 个结点</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>
<CodeTabs id="46" :data='[{"title":"示例 1："},{"title":"示例 2："},{"title":"示例 3："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2,3,4,5], n = 2
输出：[1,2,3,5]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1], n = 1
输出：[]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab2="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2], n = 1
输出：[1]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路-1" tabindex="-1"> 思路</h3>
<h3 id="python代码-1" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="面试题-02-07-链表相交" tabindex="-1"> 面试题 02.07. 链表相交</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>
<CodeTabs id="75" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Intersected at '8'
解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Intersected at '2'
解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。
在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路-2" tabindex="-1"> 思路</h3>
<h3 id="python代码-2" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_142-环形链表ii" tabindex="-1"> 142.环形链表II</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。<strong>注意：pos 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>
<p><strong>不允许修改</strong>链表。</p>
<CodeTabs id="107" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2], pos = 0
输出：返回索引为 0 的链表节点
解释：链表中有一个环，其尾部连接到第一个节点。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路-3" tabindex="-1"> 思路</h3>
<h3 id="python代码-3" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code>
</code></pre><div aria-hidden="true"><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day1 数组 | LeetCode 704. 二分查找 27. 移除元素</title>
      <link>https://findn.cn/algorithm/carl/day1.html</link>
      <guid>https://findn.cn/algorithm/carl/day1.html</guid>
      <source url="https://findn.cn/rss.xml">Day1 数组 | LeetCode 704. 二分查找 27. 移除元素</source>
      <description>本文目录 [[toc]] 704. 二分查找 力扣题目链接 (https://leetcode.cn/problems/binary-search/) 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 tab:active 示例 1：...</description>
      <category>算法</category>
      <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div>
<p>本文目录</p>
<nav><ul><li><router-link to="#_704-二分查找">704. 二分查找</router-link><ul><li><router-link to="#思路">思路</router-link></li><li><router-link to="#python代码">python代码</router-link></li></ul></li><li><router-link to="#_27-移除元素">27. 移除元素</router-link><ul><li><router-link to="#思路-1">思路</router-link></li><li><router-link to="#python代码-1">python代码</router-link></li></ul></li></ul></nav>
</div>
<h2 id="_704-二分查找" tabindex="-1"> 704. 二分查找</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<CodeTabs id="16" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：nums = [-1,0,3,5,9,12], target = 9
输出：4
解释：9 出现在 nums 中并且下标为 4
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txr"><pre><code>输入：nums = [-1,0,3,5,9,12], target = 2
输出：-1
解释：2 不存在 nums 中因此返回 -1
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路" tabindex="-1"> 思路</h3>
<blockquote>
<p>使用二分法前提条件：</p>
</blockquote>
<ul>
<li>数组为有序数组</li>
<li>数组中无重复元素</li>
</ul>
<blockquote>
<p>边界问题</p>
</blockquote>
<p>首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种：</p>
<ul>
<li>
<p>左闭右闭</p>
<ul>
<li>查找范围在[left, right]区间，初值 <code>left, right=0, len(nums) - 1</code>。</li>
<li><code>while (left &lt;= right)</code> 要使用 &lt;= ，因为左闭右闭时，left == right是有意义的。</li>
<li><code>if (nums[mid] &gt; target)</code> right == mid - 1，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而right赋值为 mid - 1 时，查找范围刚好是[left, mid - 1]。</li>
</ul>
</li>
<li>
<p>左闭右开</p>
<ul>
<li>查找范围在[left, right)区间，初值 <code>left, right=0, len(nums)</code>。</li>
<li><code>while (left &lt; right)</code> 要使用 &lt; ，因为左闭右开时，<code>left == right</code>没有意义。</li>
<li><code>if (nums[mid] &gt; target)</code> right == mid，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而 right 赋值为 mid 时，查找范围刚好是[left, mid - 1]。</li>
</ul>
</li>
</ul>
<blockquote>
<p>值溢出问题</p>
</blockquote>
<ul>
<li><code>mid = left + ((right - left) &gt;&gt; 1)</code> 与 <code>mid = (left + right) // 2</code> 计算结果一致，但当 left 和 right 很大的时候，前者可以防止溢出问题（python中整数对象是变长对象，所以不存在溢出问题），此外位运算速度比除法快。</li>
</ul>
<h3 id="python代码" tabindex="-1"> python代码</h3>
<p>左闭右闭</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>search</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>,</span> target<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>
        <span>while</span> left <span>&lt;=</span> right<span>:</span>
            mid <span>=</span> left <span>+</span><span>(</span><span>(</span>right <span>-</span> left<span>)</span> <span>>></span> <span>1</span><span>)</span>
            <span>print</span><span>(</span>left<span>,</span> right<span>,</span> mid<span>)</span>
            <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
                <span>return</span> mid
            <span>elif</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
                right <span>=</span> mid <span>-</span> <span>1</span>
            <span>else</span><span>:</span>
                left <span>=</span> mid <span>+</span> <span>1</span>
        <span>return</span> <span>-</span><span>1</span> 
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>左闭右开</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>search</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>,</span> target<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span>
        <span>while</span> left <span>&lt;</span> right<span>:</span>
            mid <span>=</span> left <span>+</span><span>(</span><span>(</span>right <span>-</span> left<span>)</span> <span>>></span> <span>1</span><span>)</span>
            <span>print</span><span>(</span>left<span>,</span> right<span>,</span> mid<span>)</span>
            <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
                <span>return</span> mid
            <span>elif</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
                right <span>=</span> mid
            <span>else</span><span>:</span>
                left <span>=</span> mid <span>+</span> <span>1</span>
        <span>return</span> <span>-</span><span>1</span> 
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_27-移除元素" tabindex="-1"> 27. 移除元素</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<CodeTabs id="132" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路-1" tabindex="-1"> 思路</h3>
<ul>
<li>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，要删除某个元素，后面的只能向前覆盖。</li>
<li>暴力法
<ul>
<li>双层循环
<ul>
<li>注意：Python 中 <code>for i in range(length)</code>中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值，可以参考<a href="https://blog.csdn.net/zhimou/article/details/105537102" target="_blank" rel="noopener noreferrer">这里</a>。</li>
</ul>
</li>
</ul>
</li>
<li>双指针（快慢指针法）
<ul>
<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组。</li>
<li>慢指针：删除了目标值的新数组的下标，慢指针只有在快指针的值不为target的值时才移动。</li>
</ul>
</li>
</ul>
<h3 id="python代码-1" tabindex="-1"> python代码</h3>
<p>暴力解法 - python调库</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>removeElement</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        <span>for</span> num <span>in</span> nums<span>[</span><span>:</span><span>:</span><span>-</span><span>1</span><span>]</span><span>:</span>  <span># nums[::-1]相当于生成一个新的迭代器，循环体内remove不影响这里num取数</span>
            <span>print</span><span>(</span>num<span>)</span>
            <span>if</span> num <span>==</span> val<span>:</span>
                nums<span>.</span>remove<span>(</span>num<span>)</span> <span># 删除操作复杂度O(n)</span>
                <span>print</span><span>(</span>nums<span>)</span>
        
        <span>return</span> <span>len</span><span>(</span>nums<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>暴力解法 - 双循环</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>removeElement</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        length <span>=</span> <span>len</span><span>(</span>nums<span>)</span>  <span># length记录新数组的长度</span>
        i <span>=</span> <span>0</span>
        <span>while</span> i <span>&lt;</span> length<span>:</span>  <span># 这里不能用for循环，因为for i in range(length)中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值</span>
            <span>if</span> nums<span>[</span>i<span>]</span> <span>==</span> val<span>:</span> <span># 判断是否等于val，相等进入第二重循环，不相等变量i加1继续执行第一重循环</span>
                <span>for</span> j <span>in</span> <span>range</span><span>(</span>i<span>+</span><span>1</span><span>,</span> length<span>)</span><span>:</span>
                    nums<span>[</span>j<span>-</span><span>1</span><span>]</span> <span>=</span> nums<span>[</span>j<span>]</span> <span># 从i之后依次向前移一位</span>
                length <span>-=</span> <span>1</span>  <span># 逻辑上删除了一个值，数组大小减1</span>
            <span>else</span><span>:</span>
                i <span>+=</span> <span>1</span>
        
        <span>return</span> length
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>双指针法（快慢指针）</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>removeElement</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        slow<span>,</span> fast <span>=</span> <span>0</span><span>,</span> <span>0</span>
        length <span>=</span> <span>len</span><span>(</span>nums<span>)</span>
        <span>while</span> fast <span>&lt;</span> length<span>:</span>
            <span>if</span> nums<span>[</span>fast<span>]</span> <span>!=</span> val<span>:</span>
                nums<span>[</span>slow<span>]</span> <span>=</span> nums<span>[</span>fast<span>]</span>
                slow <span>+=</span> <span>1</span>
            fast <span>+=</span> <span>1</span>
        <span>return</span> slow
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II</title>
      <link>https://findn.cn/algorithm/carl/day2.html</link>
      <guid>https://findn.cn/algorithm/carl/day2.html</guid>
      <source url="https://findn.cn/rss.xml">Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II</source>
      <description>本文目录 [[toc]] 977.有序数组的平方 力扣题目链接 (https://leetcode.cn/problems/squares-of-a-sorted-array/) 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 tab:active 示例 1： tab 示例 2： 思路...</description>
      <category>算法</category>
      <pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div>
<p>本文目录</p>
<nav><ul><li><router-link to="#_977-有序数组的平方">977.有序数组的平方</router-link><ul><li><router-link to="#思路">思路</router-link></li><li><router-link to="#python代码">python代码</router-link></li></ul></li><li><router-link to="#_209-长度最小的子数组">209.长度最小的子数组</router-link><ul><li><router-link to="#思路-1">思路</router-link></li><li><router-link to="#python代码-1">python代码</router-link></li></ul></li><li><router-link to="#_59-螺旋矩阵ii">59.螺旋矩阵II</router-link><ul><li><router-link to="#思路-2">思路</router-link></li><li><router-link to="#python代码-2">python代码</router-link></li></ul></li></ul></nav>
</div>
<h2 id="_977-有序数组的平方" tabindex="-1"> 977.有序数组的平方</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>
<CodeTabs id="16" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：nums = [-4,-1,0,3,10]
输出：[0,1,9,16,100]
解释：平方后，数组变为 [16,1,0,9,100]
排序后，数组变为 [0,1,9,16,100]
</code></pre></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：nums = [-7,-3,2,3,11]
输出：[4,9,9,49,121]
</code></pre></div></template>
</CodeTabs>
<h3 id="思路" tabindex="-1"> 思路</h3>
<p>由于数组有序，负数平方之后可能成为最大数，所以平方后的最大值一定在数组的两端。</p>
<blockquote>
<p>方法一：从中间向两边：找到正负分界点，然后分别向左向右遍历比较大小。</p>
</blockquote>
<ul>
<li>平方的特点是会把负数变成正数，所以一个负数和一个正数平方后的大小要根据绝对值来比较。</li>
</ul>
<blockquote>
<p>方法二：从两边向中间：</p>
</blockquote>
<ul>
<li>从两边向中间搜索数字是从大到小的，所以需要提前申请好数组空间，然后从后向前写入。</li>
</ul>
<h3 id="python代码" tabindex="-1"> python代码</h3>
<p>找到正负分界点，然后左右遍历比较</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>sortedSquares</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>)</span> <span>-</span><span>></span> List<span>[</span><span>int</span><span>]</span><span>:</span>
        <span># 由于nums有序，所以先找到由负转正的位置i</span>
        <span>for</span> i<span>,</span> num <span>in</span> <span>enumerate</span><span>(</span>nums<span>)</span><span>:</span>
            <span>if</span> num <span>>=</span> <span>0</span><span>:</span>
                <span>break</span>
        
        res <span>=</span> <span>[</span><span>]</span>  <span># 存储新结果</span>
        left<span>,</span> right <span>=</span> i<span>-</span><span>1</span><span>,</span> i  <span># 双指针，left指向绝对值最小的负值，right指向最小的正值</span>
        <span>while</span> left<span>>=</span><span>0</span> <span>and</span> right <span>&lt;</span> <span>len</span><span>(</span>nums<span>)</span><span>:</span>  <span># 分别向左向右遍历，并比较大小</span>
            <span>if</span> nums<span>[</span>left<span>]</span><span>**</span><span>2</span> <span>&lt;</span> nums<span>[</span>right<span>]</span><span>**</span><span>2</span><span>:</span>
                res<span>.</span>append<span>(</span>nums<span>[</span>left<span>]</span><span>**</span><span>2</span><span>)</span>
                left <span>-=</span> <span>1</span>
            <span>else</span><span>:</span>
                res<span>.</span>append<span>(</span>nums<span>[</span>right<span>]</span><span>**</span><span>2</span><span>)</span>
                right <span>+=</span> <span>1</span>
        
        <span>if</span> left <span>&lt;</span> <span>0</span><span>:</span>  <span># 当左边遍历结束后，把右边剩下的加入结果</span>
            <span>while</span> right <span>&lt;</span> <span>len</span><span>(</span>nums<span>)</span><span>:</span>
                res<span>.</span>append<span>(</span>nums<span>[</span>right<span>]</span><span>**</span><span>2</span><span>)</span>
                right <span>+=</span> <span>1</span>
        <span>else</span><span>:</span>  <span># 当右边遍历结束后，把左边剩下的加入结果</span>
            <span>while</span> left <span>>=</span> <span>0</span><span>:</span>
                res<span>.</span>append<span>(</span>nums<span>[</span>left<span>]</span><span>**</span><span>2</span><span>)</span>
                left <span>-=</span> <span>1</span>
        
        <span>return</span> res
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>从两边到中间，双指针</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>sortedSquares</span><span>(</span>self<span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>)</span> <span>-</span><span>></span> List<span>[</span><span>int</span><span>]</span><span>:</span>
        i<span>,</span> j <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>  <span># 起始位置</span>
        res <span>=</span> <span>[</span><span>-</span><span>1</span><span>]</span> <span>*</span> <span>len</span><span>(</span>nums<span>)</span>  <span># 存储结果</span>
        k <span>=</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>  <span># 指向res中的位置</span>
        <span>while</span> i <span>&lt;=</span> j<span>:</span>
            <span>if</span> nums<span>[</span>i<span>]</span><span>**</span><span>2</span> <span>></span> nums<span>[</span>j<span>]</span><span>**</span><span>2</span><span>:</span>
                res<span>[</span>k<span>]</span> <span>=</span> nums<span>[</span>i<span>]</span><span>**</span><span>2</span>
                i <span>+=</span> <span>1</span>  <span># i向右移一位</span>
            <span>else</span><span>:</span>
                res<span>[</span>k<span>]</span> <span>=</span> nums<span>[</span>j<span>]</span><span>**</span><span>2</span>
                j <span>-=</span> <span>1</span>  <span># j向左移一位</span>
            k <span>-=</span> <span>1</span>
        
        <span>return</span> res
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_209-长度最小的子数组" tabindex="-1"> 209.长度最小的子数组</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个含有 n 个正整数的数组和一个正整数 target ，找出该数组中满足其和 ≥ target 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>
<CodeTabs id="76" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
</code></pre></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
</code></pre></div></template>
</CodeTabs>
<h3 id="思路-1" tabindex="-1"> 思路</h3>
<blockquote>
<p>暴力解法</p>
</blockquote>
<ul>
<li>连续子数组的长度大小从0至length依次遍历，当和&gt;=target，返回连续子数组大小</li>
</ul>
<blockquote>
<p>双指针（可变滑动窗口）</p>
</blockquote>
<ul>
<li>窗口的值&lt; target，增大窗口</li>
<li>窗口的值&gt;= target，缩小窗口</li>
</ul>
<h3 id="python代码-1" tabindex="-1"> python代码</h3>
<blockquote>
<p>暴力解法 - 超时</p>
</blockquote>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>minSubArrayLen</span><span>(</span>self<span>,</span> target<span>:</span> <span>int</span><span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        len_window <span>=</span> <span>1</span>  <span># 连续子数组的长度</span>
        length <span>=</span> <span>len</span><span>(</span>nums<span>)</span>
        <span>while</span> len_window <span>&lt;=</span> length<span>:</span> <span># 假设连续子数组大小从1至length依次遍历</span>
            i<span>,</span> j <span>=</span> <span>0</span><span>,</span> len_window  <span># 指向连续子数组的开始和结尾</span>
            sum_window <span>=</span> <span>sum</span><span>(</span>nums<span>[</span><span>0</span><span>:</span>len_window<span>]</span><span>)</span>  <span># sum_window 记录长度为len_window的连续子数组的和</span>
            <span>if</span> sum_window <span>>=</span> target<span>:</span>
                <span>return</span> len_window

            <span>while</span> j <span>&lt;</span> length<span>:</span>  <span># 连续子数组向右滑动</span>
                sum_window <span>=</span> sum_window <span>-</span> nums<span>[</span>i<span>]</span> <span>+</span> nums<span>[</span>j<span>]</span>  <span># 记录更新后的和</span>
                <span>if</span> sum_window <span>>=</span> target<span>:</span>
                    <span>return</span> len_window
                i <span>+=</span> <span>1</span>
                j <span>+=</span> <span>1</span> 

            len_window <span>+=</span> <span>1</span>
        <span>return</span> <span>0</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>双指针（可变滑动窗口）</p>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>minSubArrayLen</span><span>(</span>self<span>,</span> target<span>:</span> <span>int</span><span>,</span> nums<span>:</span> List<span>[</span><span>int</span><span>]</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        i<span>,</span> j <span>=</span> <span>0</span><span>,</span> <span>0</span>  <span># i和j分别为滑动窗口起始位置和终止位置</span>
        sum_window <span>=</span> <span>0</span>  <span># 记录滑动窗口和</span>
        min_window <span>=</span> <span>float</span><span>(</span><span>"inf"</span><span>)</span>  <span># 记录最小滑动窗口的大小，初始为无穷大</span>

        <span>while</span> j <span>&lt;</span> <span>len</span><span>(</span>nums<span>)</span><span>:</span>
            sum_window <span>+=</span> nums<span>[</span>j<span>]</span>  <span># 当窗口和小于target则扩大窗口       </span>
            j <span>+=</span> <span>1</span>

            <span>while</span> sum_window <span>>=</span> target<span>:</span>  <span># 当窗口和大于等于target则缩小窗口     </span>
                sum_window <span>-=</span> nums<span>[</span>i<span>]</span>
                i <span>+=</span> <span>1</span>
                min_window <span>=</span> <span>min</span><span>(</span>j<span>-</span>i<span>+</span><span>1</span><span>,</span> min_window<span>)</span>   <span># 更新最小滑动窗口的大小</span>

        <span>return</span> <span>0</span> <span>if</span> min_window <span>==</span> <span>float</span><span>(</span><span>"inf"</span><span>)</span> <span>else</span> min_window
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_59-螺旋矩阵ii" tabindex="-1"> 59.螺旋矩阵II</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p>
<CodeTabs id="140" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]
</code></pre></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：n = 1
输出：[[1]]
</code></pre></div></template>
</CodeTabs>
<h3 id="思路-2" tabindex="-1"> 思路</h3>
<blockquote>
<p>循环填充</p>
</blockquote>
<ul>
<li>过程：填充上行，从左到右；填充右列，从上到下；填充下行，从右到左；填充左列，从下到上。</li>
<li>每条边的填充都要坚持循环一致的原则，左闭右开或者左开右闭。</li>
</ul>
<h3 id="python代码-2" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>generateMatrix</span><span>(</span>self<span>,</span> n<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> List<span>[</span>List<span>[</span><span>int</span><span>]</span><span>]</span><span>:</span>
        matrix <span>=</span> <span>[</span><span>[</span><span>0</span><span>]</span> <span>*</span> n <span>for</span> _ <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>]</span>
        startx<span>,</span> starty <span>=</span> <span>0</span><span>,</span> <span>0</span>  <span># 每圈循环的起始位置</span>
        loop <span>=</span> n <span>//</span> <span>2</span>  <span># 循环的圈数（每圈循环边长会减2）</span>
        count <span>=</span> <span>1</span>  <span># 需要填充的数字</span>
        offset <span>=</span> <span>1</span>  <span># 每圈的偏移量，每次循环右边界收缩一位</span>
        
        <span>while</span> loop <span>></span> <span>0</span><span>:</span>
            <span>for</span> j <span>in</span> <span>range</span><span>(</span>starty<span>,</span> n <span>-</span> offset<span>)</span><span>:</span>  <span># 填充上面一条边，从左至右，左闭右开</span>
                matrix<span>[</span>startx<span>]</span><span>[</span>j<span>]</span> <span>=</span> count
                count <span>+=</span> <span>1</span>
                <span>print</span><span>(</span>startx<span>,</span> j<span>)</span>
            j <span>+=</span> <span>1</span>  <span># j移到下一个位置（最右）</span>
            <span>for</span> i <span>in</span> <span>range</span><span>(</span>startx<span>,</span> n<span>-</span>offset<span>)</span><span>:</span>  <span># 填充右边一条边，从上至下，上闭下开</span>
                matrix<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> count
                count <span>+=</span> <span>1</span>
                <span>print</span><span>(</span>i<span>,</span> j<span>)</span>
            i <span>+=</span> <span>1</span>  <span># i移到下一个位置（最下）</span>
            <span>for</span> j <span>in</span> <span>range</span><span>(</span>j<span>,</span> starty<span>,</span> <span>-</span><span>1</span><span>)</span><span>:</span>  <span># 填充下边一条边，从右至左，右闭左开</span>
                matrix<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span>count
                count <span>+=</span> <span>1</span>
                <span>print</span><span>(</span>i<span>,</span> j<span>)</span>
            <span>for</span> i <span>in</span> <span>range</span><span>(</span>i<span>,</span> startx<span>,</span> <span>-</span><span>1</span><span>)</span><span>:</span>  <span># 填充左边一条边，从下至上，下闭上开</span>
                matrix<span>[</span>i<span>]</span><span>[</span>starty<span>]</span> <span>=</span> count
                count <span>+=</span> <span>1</span>
                <span>print</span><span>(</span>i<span>,</span> starty<span>)</span>
            
            startx <span>+=</span> <span>1</span>  <span># 一圈循环结束，更新起始位置、偏移量、剩余循环圈数</span>
            starty <span>+=</span> <span>1</span>
            offset <span>+=</span> <span>1</span>
            loop <span>-=</span> <span>1</span>
        
        <span>if</span> n <span>%</span> <span>2</span> <span>==</span> <span>1</span><span>:</span>  <span># n为奇数时，填充中心点</span>
            <span>print</span><span>(</span>startx<span>,</span> starty<span>,</span> count<span>)</span>
            matrix<span>[</span>startx<span>]</span><span>[</span>starty<span>]</span> <span>=</span> count

        <span>return</span> matrix
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day3 链表 | LeetCode 203.移除链表元素 707.设计链表 206.反转链表</title>
      <link>https://findn.cn/algorithm/carl/day3.html</link>
      <guid>https://findn.cn/algorithm/carl/day3.html</guid>
      <source url="https://findn.cn/rss.xml">Day3 链表 | LeetCode 203.移除链表元素 707.设计链表 206.反转链表</source>
      <description>本文目录 203.移除链表元素 # 203.移除链表元素 力扣题目链接 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 输入：head = [1,2,6,3,4,5,6], val = 6 输出：[1,2,3,4,5] 输入：head = [7,7,7,7], val = 7 输出：[]</description>
      <category>算法</category>
      <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div>
<p>本文目录</p>
<nav><ul><li><router-link to="#_203-移除链表元素">203.移除链表元素</router-link><ul><li><router-link to="#思路">思路</router-link></li><li><router-link to="#python代码">python代码</router-link></li></ul></li><li><router-link to="#_707-设计链表">707.设计链表</router-link><ul><li><router-link to="#思路-1">思路</router-link></li><li><router-link to="#python代码-1">python代码</router-link></li></ul></li><li><router-link to="#_206-反转链表">206.反转链表</router-link><ul><li><router-link to="#思路-2">思路</router-link></li><li><router-link to="#python代码-2">python代码</router-link></li></ul></li></ul></nav>
</div>
<h2 id="_203-移除链表元素" tabindex="-1"> 203.移除链表元素</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。</p>
<CodeTabs id="16" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2,6,3,4,5,6], val = 6
输出：[1,2,3,4,5]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [7,7,7,7], val = 7
输出：[]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
</CodeTabs>

<h3 id="思路" tabindex="-1"> 思路</h3>
<p>在单链表中 删除头结点 和 删除其他结点 的操作方式是不一样（删除其他结点时，都是通过该结点的前一个结点来删除该节点）。</p>
<blockquote>
<p>设置虚拟头结点来统一删除操作</p>
</blockquote>
<ul>
<li>这样删除头结点和中间结点就变得统一起来，不用分情况讨论。</li>
</ul>
<h3 id="python代码" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code><span># Definition for singly-linked list.</span>
<span># class ListNode:</span>
<span>#     def __init__(self, val=0, next=None):</span>
<span>#         self.val = val</span>
<span>#         self.next = next</span>
<span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>removeElements</span><span>(</span>self<span>,</span> head<span>:</span> Optional<span>[</span>ListNode<span>]</span><span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> Optional<span>[</span>ListNode<span>]</span><span>:</span>
        dummy_head <span>=</span> ListNode<span>(</span><span>next</span><span>=</span>head<span>)</span>  <span># 设置一个虚拟头节点dummy_head，这样删除头结点和中间结点就变得统一起来，不用分情况讨论。</span>
        cur <span>=</span> dummy_head  <span># 当前指针指向dummy_head（因为删除节点时，必须知道前一个节点的信息）</span>

        <span>while</span> cur <span>and</span> cur<span>.</span><span>next</span><span>:</span>  <span># 比较值得时候需要cur.next.val，所以cur 和 cur.next 必须有意义（不为空）</span>
            <span>while</span> cur<span>.</span><span>next</span> <span>and</span> cur<span>.</span><span>next</span><span>.</span>val <span>==</span> val<span>:</span>  <span># 只要满足条件，就执行删除操作</span>
                cur<span>.</span><span>next</span> <span>=</span>  cur<span>.</span><span>next</span><span>.</span><span>next</span>  <span># 删除cur.next节点</span>

            cur <span>=</span> cur<span>.</span><span>next</span>  <span># cur向后移动</span>
        
        <span>return</span> dummy_head<span>.</span><span>next</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_707-设计链表" tabindex="-1"> 707.设计链表</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>在链表类中实现这些功能：</p>
<ul>
<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>
</ul>
<div>
<p>示例：</p>
<p>MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3
linkedList.get(1);            //返回3</p>
</div>
<h3 id="思路-1" tabindex="-1"> 思路</h3>
<p>实现单向链表，即每个节点仅存储本身的值和后继节点。除此之外，我们还需要一个虚拟头结点作为头结点，和一个 length 参数保存有效节点数。</p>
<blockquote>
<p>单链表实现</p>
</blockquote>
<ul>
<li>初始化一个虚拟头节点，方便链表增删操作</li>
<li>实现 addAtHead(val) 和addAtTail(val) 时，可以借助 addAtIndex(index, val) 来实现</li>
</ul>
<h3 id="python代码-1" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code><span>class</span> <span>ListNode</span><span>:</span>
    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> val<span>=</span><span>0</span><span>,</span> <span>next</span><span>=</span><span>None</span><span>)</span><span>:</span>
        self<span>.</span>val <span>=</span> val
        self<span>.</span><span>next</span> <span>=</span> <span>next</span>

<span>class</span> <span>MyLinkedList</span><span>:</span>
    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>  <span># 初始化链表</span>
        self<span>.</span>dummy_head <span>=</span> ListNode<span>(</span><span>)</span>  <span># 虚拟头节点，方便链表增删操作</span>
        self<span>.</span>length <span>=</span> <span>0</span>  <span># 当前链表的长度，链表长度为n的时候，index为0 ~ (n-1)</span>

    <span>def</span> <span>get</span><span>(</span>self<span>,</span> index<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>int</span><span>:</span>
        <span>if</span> index <span>&lt;</span> <span>0</span> <span>or</span> index <span>>=</span> self<span>.</span>length<span>:</span>  <span># 先判断index是否有效，有效区间应该为[0, self.length -1]</span>
            <span>return</span> <span>-</span><span>1</span>

        cur <span>=</span> self<span>.</span>head<span>.</span><span>next</span>  <span># 查找时先走到索引为0的结点</span>
        <span>for</span> _ <span>in</span> <span>range</span><span>(</span>index<span>)</span><span>:</span>  <span># 当index为0时不进入for循环，所以后面直接返回cur.val</span>
            cur <span>=</span> cur<span>.</span><span>next</span>
        <span>return</span> cur<span>.</span>val

    <span>def</span> <span>addAtHead</span><span>(</span>self<span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>None</span><span>:</span>  
        self<span>.</span>addAtIndex<span>(</span><span>0</span><span>,</span> val<span>)</span>  <span># addAtHead相当于在index=0前添加结点</span>

    <span>def</span> <span>addAtTail</span><span>(</span>self<span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>None</span><span>:</span>
        self<span>.</span>addAtIndex<span>(</span>self<span>.</span>length<span>,</span> val<span>)</span>  <span># addATail相当于在index=length前(最后一个结点后)添加结点</span>

    <span>def</span> <span>addAtIndex</span><span>(</span>self<span>,</span> index<span>:</span> <span>int</span><span>,</span> val<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>None</span><span>:</span>
        <span>if</span> index <span>&lt;</span> <span>0</span><span>:</span>  <span># 如果index小于0，则在头部插入节点</span>
            index <span>=</span> <span>0</span>
        <span>if</span> index <span>&lt;=</span> self<span>.</span>length<span>:</span>  <span># 插入的合法范围为[0, length]</span>
            cur <span>=</span> self<span>.</span>head
            <span>for</span> _ <span>in</span> <span>range</span><span>(</span>index<span>)</span><span>:</span>
                cur <span>=</span> cur<span>.</span><span>next</span>
            cur<span>.</span><span>next</span> <span>=</span> ListNode<span>(</span>val<span>,</span> cur<span>.</span><span>next</span><span>)</span>
            self<span>.</span>length <span>+=</span> <span>1</span>  <span># 更新size</span>

    <span>def</span> <span>deleteAtIndex</span><span>(</span>self<span>,</span> index<span>:</span> <span>int</span><span>)</span> <span>-</span><span>></span> <span>None</span><span>:</span>
        <span>if</span>  <span>0</span> <span>&lt;=</span> index <span>&lt;</span> self<span>.</span>length<span>:</span>  <span># 删除的合法范围为[0, length-1]</span>
            cur <span>=</span> self<span>.</span>head
            <span>for</span> _ <span>in</span> <span>range</span><span>(</span>index<span>)</span><span>:</span>
                cur <span>=</span> cur<span>.</span><span>next</span>
            cur<span>.</span><span>next</span> <span>=</span> cur<span>.</span><span>next</span><span>.</span><span>next</span>
            self<span>.</span>length <span>-=</span> <span>1</span>  <span># 更新size</span>

<span># Your MyLinkedList object will be instantiated and called as such:</span>
<span># obj = MyLinkedList()</span>
<span># param_1 = obj.get(index)</span>
<span># obj.addAtHead(val)</span>
<span># obj.addAtTail(val)</span>
<span># obj.addAtIndex(index,val)</span>
<span># obj.deleteAtIndex(index)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_206-反转链表" tabindex="-1"> 206.反转链表</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>
<CodeTabs id="128" :data='[{"title":"示例 1："},{"title":"示例 2："}]' :active="0" tab-id="txt">

<template #tab0="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = [1,2,3,4,5]
输出：[5,4,3,2,1]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div data-ext="txt"><pre><code>输入：head = []
输出：[]
</code></pre><div aria-hidden="true"><div></div><div></div></div></div></template>
</CodeTabs>
<h3 id="思路-2" tabindex="-1"> 思路</h3>
<blockquote>
<p>双指针遍历链表，依次改变链表的next指针的指向</p>
</blockquote>
<ul>
<li>初始值 <code>pre=None</code>，<code>cur=head</code>，结束条件 <code>cur != None</code></li>
</ul>
<h3 id="python代码-2" tabindex="-1"> python代码</h3>
<div data-ext="py"><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>def</span> <span>reverseList</span><span>(</span>self<span>,</span> head<span>:</span> Optional<span>[</span>ListNode<span>]</span><span>)</span> <span>-</span><span>></span> Optional<span>[</span>ListNode<span>]</span><span>:</span>
        pre <span>=</span> <span>None</span>  <span># 因为链表反转后第一个节点head会指向None，所以pre初始值为None</span>
        cur <span>=</span> head
        <span>while</span> cur<span>:</span>  <span># 当cur为None的时候说明链表反转结束，返回pre</span>
            tmp <span>=</span> cur<span>.</span><span>next</span>  <span># tmp存储cur的下一个节点，防止链表丢失</span>
            cur<span>.</span><span>next</span> <span>=</span> pre  <span># 先更改cur.next，再向后移动pre和cur指针</span>
            pre <span>=</span> cur
            cur <span>=</span> tmp  <span># cur不能指向cur.next，因为cur.next已经改变，所以指向tmp</span>
        
        <span>return</span> pre
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>