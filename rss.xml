<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://findn.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://findn.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Find Notes</title>
    <link>https://findn.cn/</link>
    <description>三水的笔记 - 找到CS笔记的乐趣</description>
    <language>zh-CN</language>
    <pubDate>Tue, 28 Feb 2023 05:07:11 GMT</pubDate>
    <lastBuildDate>Tue, 28 Feb 2023 05:07:11 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by 三水</copyright>
    <image>
      <title>Find Notes</title>
      <url>https://findn.cn/findnotes.svg</url>
      <link>https://findn.cn/</link>
    </image>
    <category>算法</category>
    <item>
      <title>Day4 链表 | LeetCode 24.两两交换链表中的节点 19.删除链表的倒数第N个节点 面试题 02.07. 链表相交 142.环形链表II</title>
      <link>https://findn.cn/algorithm/carl/day4.html</link>
      <guid>https://findn.cn/algorithm/carl/day4.html</guid>
      <source url="https://findn.cn/rss.xml">Day4 链表 | LeetCode 24.两两交换链表中的节点 19.删除链表的倒数第N个节点 面试题 02.07. 链表相交 142.环形链表II</source>
      <description>本文目录 [[toc]] 24.两两交换链表中的节点 力扣题目链接 (https://leetcode.cn/problems/swap-nodes-in-pairs/) 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 tab:active 示例 1： tab 示例 ...</description>
      <category>算法</category>
      <pubDate>Tue, 29 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">本文目录</p>

</div>
<h2> 24.两两交换链表中的节点</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>

<!-- more -->
<h3> 思路</h3>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 19.删除链表的倒数第 N 个结点</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>

<h3> 思路</h3>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 面试题 02.07. 链表相交</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>

<h3> 思路</h3>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 142.环形链表II</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个链表的头节点 &nbsp;head&nbsp;，返回链表开始入环的第一个节点。&nbsp;如果链表无环，则返回&nbsp;null。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。<strong>注意：pos 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>
<p><strong>不允许修改</strong>链表。</p>

<h3> 思路</h3>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day1 数组 | LeetCode 704. 二分查找 27. 移除元素</title>
      <link>https://findn.cn/algorithm/carl/day1.html</link>
      <guid>https://findn.cn/algorithm/carl/day1.html</guid>
      <source url="https://findn.cn/rss.xml">Day1 数组 | LeetCode 704. 二分查找 27. 移除元素</source>
      <description>本文目录 [[toc]] 704. 二分查找 力扣题目链接 (https://leetcode.cn/problems/binary-search/) 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 tab:active 示例 1：...</description>
      <category>算法</category>
      <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">本文目录</p>

</div>
<h2> 704. 二分查找</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>

<h3> 思路</h3>
<blockquote>
<p>使用二分法前提条件：</p>
</blockquote>
<ul>
<li>数组为有序数组</li>
<li>数组中无重复元素</li>
</ul>
<blockquote>
<p>边界问题</p>
</blockquote>
<p>首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种：</p>
<ul>
<li>
<p>左闭右闭</p>
<ul>
<li>查找范围在[left, right]区间，初值 <code>left, right=0, len(nums) - 1</code>。</li>
<li><code>while (left &lt;= right)</code> 要使用 &lt;= ，因为左闭右闭时，left == right是有意义的。</li>
<li><code>if (nums[mid] &gt; target)</code> right == mid - 1，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而right赋值为 mid - 1 时，查找范围刚好是[left, mid - 1]。</li>
</ul>
</li>
<li>
<p>左闭右开</p>
<ul>
<li>查找范围在[left, right)区间，初值 <code>left, right=0, len(nums)</code>。</li>
<li><code>while (left &lt; right)</code> 要使用 &lt; ，因为左闭右开时，<code>left == right</code>没有意义。</li>
<li><code>if (nums[mid] &gt; target)</code> right == mid，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而 right 赋值为 mid 时，查找范围刚好是[left, mid - 1]。</li>
</ul>
</li>
</ul>
<blockquote>
<p>值溢出问题</p>
</blockquote>
<ul>
<li><code>mid = left + ((right - left) &gt;&gt; 1)</code> 与 <code>mid = (left + right) // 2</code> 计算结果一致，但当 left 和 right 很大的时候，前者可以防止溢出问题（python中整数对象是变长对象，所以不存在溢出问题），此外位运算速度比除法快。</li>
</ul>
<h3> python代码</h3>
<p>左闭右闭</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左闭右开</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 27. 移除元素</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>

<h3> 思路</h3>
<ul>
<li>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，要删除某个元素，后面的只能向前覆盖。</li>
<li>暴力法
<ul>
<li>双层循环
<ul>
<li>注意：Python 中 <code>for i in range(length)</code>中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值，可以参考<a href="https://blog.csdn.net/zhimou/article/details/105537102" target="_blank" rel="noopener noreferrer">这里</a>。</li>
</ul>
</li>
</ul>
</li>
<li>双指针（快慢指针法）
<ul>
<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组。</li>
<li>慢指针：删除了目标值的新数组的下标，慢指针只有在快指针的值不为target的值时才移动。</li>
</ul>
</li>
</ul>
<h3> python代码</h3>
<p>暴力解法 - python调库</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴力解法 - 双循环</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双指针法（快慢指针）</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II</title>
      <link>https://findn.cn/algorithm/carl/day2.html</link>
      <guid>https://findn.cn/algorithm/carl/day2.html</guid>
      <source url="https://findn.cn/rss.xml">Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II</source>
      <description>本文目录 [[toc]] 977.有序数组的平方 力扣题目链接 (https://leetcode.cn/problems/squares-of-a-sorted-array/) 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 tab:active 示例 1： tab 示例 2： 思路...</description>
      <category>算法</category>
      <pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">本文目录</p>

</div>
<h2> 977.有序数组的平方</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>

<h3> 思路</h3>
<p>由于数组有序，负数平方之后可能成为最大数，所以平方后的最大值一定在数组的两端。</p>
<blockquote>
<p>方法一：从中间向两边：找到正负分界点，然后分别向左向右遍历比较大小。</p>
</blockquote>
<ul>
<li>平方的特点是会把负数变成正数，所以一个负数和一个正数平方后的大小要根据绝对值来比较。</li>
</ul>
<blockquote>
<p>方法二：从两边向中间：</p>
</blockquote>
<ul>
<li>从两边向中间搜索数字是从大到小的，所以需要提前申请好数组空间，然后从后向前写入。</li>
</ul>
<h3> python代码</h3>
<p>找到正负分界点，然后左右遍历比较</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从两边到中间，双指针</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 209.长度最小的子数组</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给定一个含有 n 个正整数的数组和一个正整数 target ，找出该数组中满足其和 ≥ target 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>

<h3> 思路</h3>
<blockquote>
<p>暴力解法</p>
</blockquote>
<ul>
<li>连续子数组的长度大小从0至length依次遍历，当和&gt;=target，返回连续子数组大小</li>
</ul>
<blockquote>
<p>双指针（可变滑动窗口）</p>
</blockquote>
<ul>
<li>窗口的值&lt; target，增大窗口</li>
<li>窗口的值&gt;= target，缩小窗口</li>
</ul>
<h3> python代码</h3>
<blockquote>
<p>暴力解法 - 超时</p>
</blockquote>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双指针（可变滑动窗口）</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 59.螺旋矩阵II</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p>

<h3> 思路</h3>
<blockquote>
<p>循环填充</p>
</blockquote>
<ul>
<li>过程：填充上行，从左到右；填充右列，从上到下；填充下行，从右到左；填充左列，从下到上。</li>
<li>每条边的填充都要坚持循环一致的原则，左闭右开或者左开右闭。</li>
</ul>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Day3 链表 | LeetCode 203.移除链表元素 707.设计链表 206.反转链表</title>
      <link>https://findn.cn/algorithm/carl/day3.html</link>
      <guid>https://findn.cn/algorithm/carl/day3.html</guid>
      <source url="https://findn.cn/rss.xml">Day3 链表 | LeetCode 203.移除链表元素 707.设计链表 206.反转链表</source>
      <description>本文目录 [[toc]] 203.移除链表元素 力扣题目链接 (https://leetcode.cn/problems/remove-linked-list-elements/) 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 tab:active 示例 1...</description>
      <category>算法</category>
      <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">本文目录</p>

</div>
<h2> 203.移除链表元素</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。</p>

<!-- more -->
<h3> 思路</h3>
<p>在单链表中 删除头结点 和 删除其他结点 的操作方式是不一样（删除其他结点时，都是通过该结点的前一个结点来删除该节点）。</p>
<blockquote>
<p>设置虚拟头结点来统一删除操作</p>
</blockquote>
<ul>
<li>这样删除头结点和中间结点就变得统一起来，不用分情况讨论。</li>
</ul>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 707.设计链表</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>在链表类中实现这些功能：</p>
<ul>
<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">示例：</p>
<p>MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3
linkedList.get(1);            //返回3</p>
</div>
<h3> 思路</h3>
<p>实现单向链表，即每个节点仅存储本身的值和后继节点。除此之外，我们还需要一个虚拟头结点作为头结点，和一个 length 参数保存有效节点数。</p>
<blockquote>
<p>单链表实现</p>
</blockquote>
<ul>
<li>初始化一个虚拟头节点，方便链表增删操作</li>
<li>实现 addAtHead(val) 和addAtTail(val) 时，可以借助 addAtIndex(index, val) 来实现</li>
</ul>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 206.反转链表</h2>
<blockquote>
<p><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noopener noreferrer">力扣题目链接</a></p>
</blockquote>
<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>

<h3> 思路</h3>
<blockquote>
<p>双指针遍历链表，依次改变链表的next指针的指向</p>
</blockquote>
<ul>
<li>初始值 <code>pre=None</code>，<code>cur=head</code>，结束条件 <code>cur != None</code></li>
</ul>
<h3> python代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>