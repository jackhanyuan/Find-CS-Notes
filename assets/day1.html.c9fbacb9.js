import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as k,c as m,a as n,b as a,w as t,e as s,f as r,r as c}from"./app.dc751b8e.js";const v={},b={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"本文目录",-1),g={class:"table-of-contents"},f=n("h2",{id:"_704-二分查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_704-二分查找","aria-hidden":"true"},"#"),s(" 704. 二分查找")],-1),_={href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。",-1),w=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [-1,0,3,5,9,12], target = 9
输出：4
解释：9 出现在 nums 中并且下标为 4
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-txr line-numbers-mode","data-ext":"txr"},[n("pre",{class:"language-txr"},[n("code",null,`输入：nums = [-1,0,3,5,9,12], target = 2
输出：-1
解释：2 不存在 nums 中因此返回 -1
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=r(`<h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><blockquote><p>使用二分法前提条件：</p></blockquote><ul><li>数组为有序数组</li><li>数组中无重复元素</li></ul><blockquote><p>边界问题</p></blockquote><p>首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种：</p><ul><li><p>左闭右闭</p><ul><li>查找范围在[left, right]区间，初值 <code>left, right=0, len(nums) - 1</code>。</li><li><code>while (left &lt;= right)</code> 要使用 &lt;= ，因为左闭右闭时，left == right是有意义的。</li><li><code>if (nums[mid] &gt; target)</code> right == mid - 1，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而right赋值为 mid - 1 时，查找范围刚好是[left, mid - 1]。</li></ul></li><li><p>左闭右开</p><ul><li>查找范围在[left, right)区间，初值 <code>left, right=0, len(nums)</code>。</li><li><code>while (left &lt; right)</code> 要使用 &lt; ，因为左闭右开时，<code>left == right</code>没有意义。</li><li><code>if (nums[mid] &gt; target)</code> right == mid，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而 right 赋值为 mid 时，查找范围刚好是[left, mid - 1]。</li></ul></li></ul><blockquote><p>值溢出问题</p></blockquote><ul><li><code>mid = left + ((right - left) &gt;&gt; 1)</code> 与 <code>mid = (left + right) // 2</code> 计算结果一致，但当 left 和 right 很大的时候，前者可以防止溢出问题（python中整数对象是变长对象，所以不存在溢出问题），此外位运算速度比除法快。</li></ul><h3 id="python代码" tabindex="-1"><a class="header-anchor" href="#python代码" aria-hidden="true">#</a> python代码</h3><p>左闭右闭</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> left <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左闭右开</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> left <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-移除元素" tabindex="-1"><a class="header-anchor" href="#_27-移除元素" aria-hidden="true">#</a> 27. 移除元素</h2>`,14),L={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,"给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。",-1),S=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h3",{id:"思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路-1","aria-hidden":"true"},"#"),s(" 思路")],-1),N=n("li",null,"数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，要删除某个元素，后面的只能向前覆盖。",-1),V=n("code",null,"for i in range(length)",-1),j={href:"https://blog.csdn.net/zhimou/article/details/105537102",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[s("双指针（快慢指针法） "),n("ul",null,[n("li",null,"快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组。"),n("li",null,"慢指针：删除了目标值的新数组的下标，慢指针只有在快指针的值不为target的值时才移动。")])],-1),T=r(`<h3 id="python代码-1" tabindex="-1"><a class="header-anchor" href="#python代码-1" aria-hidden="true">#</a> python代码</h3><p>暴力解法 - python调库</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># nums[::-1]相当于生成一个新的迭代器，循环体内remove不影响这里num取数</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment"># 删除操作复杂度O(n)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴力解法 - 双循环</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># length记录新数组的长度</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>  <span class="token comment"># 这里不能用for循环，因为for i in range(length)中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span> <span class="token comment"># 判断是否等于val，相等进入第二重循环，不相等变量i加1继续执行第一重循环</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment"># 从i之后依次向前移一位</span>
                length <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 逻辑上删除了一个值，数组大小减1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">return</span> length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双指针法（快慢指针）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
                slow <span class="token operator">+=</span> <span class="token number">1</span>
            fast <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function I(O,z){const e=c("router-link"),p=c("ExternalLinkIcon"),u=c("CodeTabs");return k(),m("div",null,[n("div",b,[h,n("nav",g,[n("ul",null,[n("li",null,[a(e,{to:"#_704-二分查找"},{default:t(()=>[s("704. 二分查找")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#思路"},{default:t(()=>[s("思路")]),_:1})]),n("li",null,[a(e,{to:"#python代码"},{default:t(()=>[s("python代码")]),_:1})])])]),n("li",null,[a(e,{to:"#_27-移除元素"},{default:t(()=>[s("27. 移除元素")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#思路-1"},{default:t(()=>[s("思路")]),_:1})]),n("li",null,[a(e,{to:"#python代码-1"},{default:t(()=>[s("python代码")]),_:1})])])])])])]),f,n("blockquote",null,[n("p",null,[n("a",_,[s("力扣题目链接"),a(p)])])]),y,a(u,{id:"16",data:[{title:"示例 1："},{title:"示例 2："}],active:0,"tab-id":"txt"},{tab0:t(({title:o,value:l,isActive:i})=>[w]),tab1:t(({title:o,value:l,isActive:i})=>[x]),_:1}),q,n("blockquote",null,[n("p",null,[n("a",L,[s("力扣题目链接"),a(p)])])]),E,a(u,{id:"132",data:[{title:"示例 1："},{title:"示例 2："}],active:0,"tab-id":"txt"},{tab0:t(({title:o,value:l,isActive:i})=>[S]),tab1:t(({title:o,value:l,isActive:i})=>[A]),_:1}),C,n("ul",null,[N,n("li",null,[s("暴力法 "),n("ul",null,[n("li",null,[s("双层循环 "),n("ul",null,[n("li",null,[s("注意：Python 中 "),V,s("中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值，可以参考"),n("a",j,[s("这里"),a(p)]),s("。")])])])])]),B]),T])}const F=d(v,[["render",I],["__file","day1.html.vue"]]);export{F as default};
