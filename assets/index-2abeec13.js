const Z="ENTRIES",W="KEYS",T="VALUES",p="";let O=class{constructor(e,t){const s=e._tree,n=Array.from(s.keys());this.set=e,this._type=t,this._path=n.length>0?[{node:s,keys:n}]:[]}next(){const e=this.dive();return this.backtrack(),e}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:e,keys:t}=E(this._path);if(E(t)===p)return{done:!1,value:this.result()};const s=e.get(E(t));return this._path.push({node:s,keys:Array.from(s.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const e=E(this._path).keys;e.pop(),!(e.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:e})=>E(e)).filter(e=>e!==p).join("")}value(){return E(this._path).node.get(p)}result(){switch(this._type){case T:return this.value();case W:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}};const E=e=>e[e.length-1],tt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,i=u+s,o=new Uint8Array(i*u).fill(s+1);for(let r=0;r<u;++r)o[r]=r;for(let r=1;r<i;++r)o[r*u]=r;return $(e,t,s,n,o,1,u,""),n},$=(e,t,s,n,u,i,o,r)=>{const a=i*o;t:for(const c of e.keys())if(c===p){const d=u[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=i;for(let l=0;l<c.length;++l,++d){const f=c[l],m=o*d,F=m-o;let h=u[m];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let _=g;_<A;++_){const I=f!==t[_],x=u[F+_]+ +I,y=u[F+_+1]+1,k=u[m+_]+1,V=u[m+_+1]=Math.min(x,y,k);V<h&&(h=V)}if(h>s)continue t}$(e.get(c),t,s,n,u,d,o,r+c)}};let R=class w{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=b(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,i]=S(n);for(const o of u.keys())if(o!==p&&o.startsWith(i)){const r=new Map;return r.set(o.slice(i.length),u.get(o)),new w(r,t)}}return new w(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,et(this._tree,t)}entries(){return new O(this,Z)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return tt(this._tree,t,s)}get(t){const s=M(this._tree,t);return s!==void 0?s.get(p):void 0}has(t){const s=M(this._tree,t);return s!==void 0&&s.has(p)}keys(){return new O(this,W)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,B(this._tree,t).set(p,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=B(this._tree,t);return n.set(p,s(n.get(p))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=B(this._tree,t);let u=n.get(p);return u===void 0&&n.set(p,u=s()),u}values(){return new O(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new w;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return w.from(Object.entries(t))}};const b=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==p&&t.startsWith(n))return s.push([e,n]),b(e.get(n),t.slice(n.length),s);return s.push([e,t]),b(void 0,"",s)},M=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==p&&t.startsWith(s))return M(e.get(s),t.slice(s.length))},B=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const i of e.keys())if(i!==p&&t[n]===i[0]){const o=Math.min(s-n,i.length);let r=1;for(;r<o&&t[n+r]===i[r];)++r;const a=e.get(i);if(r===i.length)e=a;else{const c=new Map;c.set(i.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(i),e=c}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},et=(e,t)=>{const[s,n]=b(e,t);if(s!==void 0){if(s.delete(p),s.size===0)q(n);else if(s.size===1){const[u,i]=s.entries().next().value;P(n,u,i)}}},q=e=>{if(e.length===0)return;const[t,s]=S(e);if(t.delete(s),t.size===0)q(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==p&&P(e.slice(0,-1),n,u)}},P=(e,t,s)=>{if(e.length===0)return;const[n,u]=S(e);n.set(u+t,s),n.delete(u)},S=e=>e[e.length-1],st=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,j="or",N="and",nt="and_not",ut=(e,t)=>{e.includes(t)||e.push(t)},G=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},it=({score:e},{score:t})=>t-e,ot=()=>new Map,v=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},J=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,rt={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:i,match:o}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,o),G(n.terms,i)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:i,terms:o,match:r}=t.get(n);G(u.terms,o),s.set(n,{score:u.score+i,terms:u.terms,match:Object.assign(u.match,r)})}return s},[nt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ct=(e,t,s,n,u,i)=>{const{k:o,b:r,d:a}=i;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/u)))},ht=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,i=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:i}},lt={k:1.2,b:.7,d:.5},dt={idField:"id",extractField:(e,t)=>e[t],tokenize:(e,t)=>e.split(st),processTerm:(e,t)=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t,s)=>console!=null&&console.warn!=null&&console[e](t),autoVacuum:!0},U={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:lt},at={combineWith:N,prefix:(e,t,s)=>t===s.length-1},ft={batchSize:1e3,batchWait:10},H={minDirtFactor:.1,minDirtCount:20},Ft={...ft,...H};class gt{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...dt,...t,autoVacuum:s,searchOptions:{...U,...t.searchOptions||{}},autoSuggestOptions:{...at,...t.autoSuggestOptions||{}}},this._index=new R,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=H,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[i,o]of n)u[i]=Object.fromEntries(o);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const K=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},mt=(e,t,s,n)=>{if(!e._index.has(n)){K(e,s,t,n);return}const u=e._index.fetch(n,ot),i=u.get(t);i==null||i.get(s)==null?K(e,s,t,n):i.get(s)<=1?i.size<=1?u.delete(t):i.delete(s):i.set(s,i.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},X=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(rt[s])||new Map},L=(e,t,s,n,u,i,o,r,a=new Map)=>{if(u==null)return a;for(const c of Object.keys(i)){const d=i[c],l=e._fieldIds[c],f=u.get(l);if(f==null)continue;let m=f.size;const F=e._avgFieldLength[l];for(const h of f.keys()){if(!e._documentIds.has(h)){mt(e,l,h,s),m-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=f.get(h),_=e._fieldLength.get(h)[l],I=ct(A,m,e._documentCount,_,F,r),x=n*d*g*I,y=a.get(h);if(y){y.score+=x,ut(y.terms,t);const k=J(y.match,s);k?k.push(c):y.match[s]=[c]}else a.set(h,{score:x,terms:[t],match:{[s]:[c]}})}}return a},pt=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:J(n.boost,g)||1}),{}),{boostDocument:i,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...U.weights,...o},l=e._index.get(t.term),f=L(e,t.term,t.term,1,l,u,i,a);let m,F;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(F=e._index.fuzzyGet(t.term,g))}if(m)for(const[h,g]of m){const A=h.length-t.term.length;if(!A)continue;F==null||F.delete(h);const _=d*h.length/(h.length+.3*A);L(e,t.term,h,_,g,u,i,a,f)}if(F)for(const h of F.keys()){const[g,A]=F.get(h);if(!A)continue;const _=c*h.length/(h.length+A);L(e,t.term,h,_,g,u,i,a,f)}return f},Y=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(f=>Y(e,f,d));return X(l,d.combineWith)}const{tokenize:n,processTerm:u,searchOptions:i}=e._options,o={tokenize:n,processTerm:u,...i,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(ht(o)).map(d=>pt(e,d,o));return X(c,o.combineWith)},_t=(e,t,s={})=>{const n=Y(e,t,s),u=[];for(const[i,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(i),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(i)),(s.filter==null||s.filter(d))&&u.push(d)}return u.sort(it),u},At=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:i,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new gt(d);l._documentCount=t,l._nextId=s,l._documentIds=v(n),l._idToShortId=new Map,l._fieldIds=u,l._fieldLength=v(i),l._avgFieldLength=o,l._storedFields=v(r),l._dirtCount=a||0,l._index=new R;for(const[f,m]of l._documentIds)l._idToShortId.set(m,f);for(const[f,m]of e){const F=new Map;for(const h of Object.keys(m)){let g=m[h];c===1&&(g=g.ds),F.set(parseInt(h,10),v(g))}l._index.set(f,F)}return l},Q=Object.entries,yt=Object.fromEntries,Et=Object.keys,z=100,C=20,D=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let i=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>C?`… ${c.slice(-C)}`:c:d?l=c.length+o>z?`${c.slice(0,z-o)}… `:c:l=c.length>C?`${c.slice(0,C)} … ${c.slice(-C)}`:c,l&&u.push(l),o+=l.length,d||(u.push(["mark",t]),o+=t.length,o>=z&&u.push(" …"))};let a=s.indexOf(n,i);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(i,a)),i=c,o>z)break;a=s.indexOf(n,i)}return o<z&&r(e.slice(i),!0),u},zt=(e,t,s={})=>{const n={};return _t(t,e,{fuzzy:.2,prefix:!0,boost:{header:4,text:2,title:1},...s}).forEach(u=>{const{title:i,id:o,terms:r,score:a}=u,c=o.split("#")[0];n[c]||(n[c]={title:i,contents:[]});const{contents:d}=n[c],l=f=>{const m=D(u.title,f);if(m&&d.push({type:"title",id:o,display:m,score:a}),"header"in u){const F=D(u.header,f);F&&d.push({type:"heading",id:o.split("#")[0],display:F,score:a})}if("text"in u)for(const F of u.text){const h=D(F,f);h&&d.push({type:"content",header:"header"in u?u.header:u.title,id:o.split("#")[0],display:h,score:a})}"customFields"in u&&Q(u.customFields).forEach(([F,h])=>{h.forEach(g=>{const A=D(g,f);A&&d.push({type:"custom",id:o,index:F,display:A,score:a})})})};r.forEach(f=>{l(f)})}),Et(n).sort((u,i)=>n[i].contents.reduce((o,{score:r})=>o+r,0)-n[u].contents.reduce((o,{score:r})=>o+r,0)).map(u=>n[u])},Ct=yt(Q(JSON.parse(SEARCH_PRO_INDEX)).map(([e,t])=>[e,At(t,{fields:["title","header","text","customFields"],storeFields:["title","header","text","customFields"]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(zt(e,Ct[t],s))};
//# sourceMappingURL=index.js.map
