import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as k,c as d,a as n,b as t,w as s,e as a,f as u}from"./app-CHw5kVYW.js";const m={},v={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"本文目录",-1),h={class:"table-of-contents"},y=n("h2",{id:"_977-有序数组的平方",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_977-有序数组的平方"},[n("span",null,"977.有序数组的平方")])],-1),g={href:"https://leetcode.cn/problems/squares-of-a-sorted-array/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。",-1),_=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [-4,-1,0,3,10]
输出：[0,1,9,16,100]
解释：平方后，数组变为 [16,1,0,9,100]
排序后，数组变为 [0,1,9,16,100]
`)])],-1),f=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [-7,-3,2,3,11]
输出：[4,9,9,49,121]
`)])],-1),x=u(`<h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h3><p>由于数组有序，负数平方之后可能成为最大数，所以平方后的最大值一定在数组的两端。</p><blockquote><p>方法一：从中间向两边：找到正负分界点，然后分别向左向右遍历比较大小。</p></blockquote><ul><li>平方的特点是会把负数变成正数，所以一个负数和一个正数平方后的大小要根据绝对值来比较。</li></ul><blockquote><p>方法二：从两边向中间：</p></blockquote><ul><li>从两边向中间搜索数字是从大到小的，所以需要提前申请好数组空间，然后从后向前写入。</li></ul><h3 id="python代码" tabindex="-1"><a class="header-anchor" href="#python代码"><span>python代码</span></a></h3><p>找到正负分界点，然后左右遍历比较</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># 由于nums有序，所以先找到由负转正的位置i</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储新结果</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i  <span class="token comment"># 双指针，left指向绝对值最小的负值，right指向最小的正值</span>
        <span class="token keyword">while</span> left<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">and</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 分别向左向右遍历，并比较大小</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
                left <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当左边遍历结束后，把右边剩下的加入结果</span>
            <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 当右边遍历结束后，把左边剩下的加入结果</span>
            <span class="token keyword">while</span> left <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
                left <span class="token operator">-=</span> <span class="token number">1</span>
        
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从两边到中间，双指针</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 起始位置</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># 存储结果</span>
        k <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 指向res中的位置</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">:</span>
                res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># i向右移一位</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span>
                j <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># j向左移一位</span>
            k <span class="token operator">-=</span> <span class="token number">1</span>
        
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_209-长度最小的子数组" tabindex="-1"><a class="header-anchor" href="#_209-长度最小的子数组"><span>209.长度最小的子数组</span></a></h2>`,12),j={href:"https://leetcode.cn/problems/minimum-size-subarray-sum/",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"给定一个含有 n 个正整数的数组和一个正整数 target ，找出该数组中满足其和 ≥ target 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。",-1),I=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
`)])],-1),L=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
`)])],-1),A=u(`<h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1"><span>思路</span></a></h3><blockquote><p>暴力解法</p></blockquote><ul><li>连续子数组的长度大小从0至length依次遍历，当和&gt;=target，返回连续子数组大小</li></ul><blockquote><p>双指针（可变滑动窗口）</p></blockquote><ul><li>窗口的值&lt; target，增大窗口</li><li>窗口的值&gt;= target，缩小窗口</li></ul><h3 id="python代码-1" tabindex="-1"><a class="header-anchor" href="#python代码-1"><span>python代码</span></a></h3><blockquote><p>暴力解法 - 超时</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        len_window <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 连续子数组的长度</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> len_window <span class="token operator">&lt;=</span> length<span class="token punctuation">:</span> <span class="token comment"># 假设连续子数组大小从1至length依次遍历</span>
            i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len_window  <span class="token comment"># 指向连续子数组的开始和结尾</span>
            sum_window <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len_window<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># sum_window 记录长度为len_window的连续子数组的和</span>
            <span class="token keyword">if</span> sum_window <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> len_window

            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>  <span class="token comment"># 连续子数组向右滑动</span>
                sum_window <span class="token operator">=</span> sum_window <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment"># 记录更新后的和</span>
                <span class="token keyword">if</span> sum_window <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> len_window
                i <span class="token operator">+=</span> <span class="token number">1</span>
                j <span class="token operator">+=</span> <span class="token number">1</span> 

            len_window <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双指针（可变滑动窗口）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>  <span class="token comment"># i和j分别为滑动窗口起始位置和终止位置</span>
        sum_window <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 记录滑动窗口和</span>
        min_window <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 记录最小滑动窗口的大小，初始为无穷大</span>

        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            sum_window <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token comment"># 当窗口和小于target则扩大窗口       </span>
            j <span class="token operator">+=</span> <span class="token number">1</span>

            <span class="token keyword">while</span> sum_window <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>  <span class="token comment"># 当窗口和大于等于target则缩小窗口     </span>
                sum_window <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
                min_window <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> min_window<span class="token punctuation">)</span>   <span class="token comment"># 更新最小滑动窗口的大小</span>

        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">if</span> min_window <span class="token operator">==</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span> <span class="token keyword">else</span> min_window
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_59-螺旋矩阵ii" tabindex="-1"><a class="header-anchor" href="#_59-螺旋矩阵ii"><span>59.螺旋矩阵II</span></a></h2>`,11),T={href:"https://leetcode.cn/problems/spiral-matrix-ii/",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。",-1),C=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]
`)])],-1),N=n("div",{class:"language-txt","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：n = 1
输出：[[1]]
`)])],-1),D=u(`<h3 id="思路-2" tabindex="-1"><a class="header-anchor" href="#思路-2"><span>思路</span></a></h3><blockquote><p>循环填充</p></blockquote><ul><li>过程：填充上行，从左到右；填充右列，从上到下；填充下行，从右到左；填充左列，从下到上。</li><li>每条边的填充都要坚持循环一致的原则，左闭右开或者左开右闭。</li></ul><h3 id="python代码-2" tabindex="-1"><a class="header-anchor" href="#python代码-2"><span>python代码</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        startx<span class="token punctuation">,</span> starty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>  <span class="token comment"># 每圈循环的起始位置</span>
        loop <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># 循环的圈数（每圈循环边长会减2）</span>
        count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 需要填充的数字</span>
        offset <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 每圈的偏移量，每次循环右边界收缩一位</span>
        
        <span class="token keyword">while</span> loop <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>starty<span class="token punctuation">,</span> n <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 填充上面一条边，从左至右，左闭右开</span>
                matrix<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># j移到下一个位置（最右）</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> n<span class="token operator">-</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 填充右边一条边，从上至下，上闭下开</span>
                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># i移到下一个位置（最下）</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> starty<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 填充下边一条边，从右至左，右闭左开</span>
                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>count
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> startx<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 填充左边一条边，从下至上，下闭上开</span>
                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> count
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> starty<span class="token punctuation">)</span>
            
            startx <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 一圈循环结束，更新起始位置、偏移量、剩余循环圈数</span>
            starty <span class="token operator">+=</span> <span class="token number">1</span>
            offset <span class="token operator">+=</span> <span class="token number">1</span>
            loop <span class="token operator">-=</span> <span class="token number">1</span>
        
        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># n为奇数时，填充中心点</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> starty<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
            matrix<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> count

        <span class="token keyword">return</span> matrix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function Z(z,V){const o=i("router-link"),l=i("ExternalLinkIcon"),c=i("CodeTabs");return k(),d("div",null,[n("div",v,[b,n("nav",h,[n("ul",null,[n("li",null,[t(o,{to:"#_977-有序数组的平方"},{default:s(()=>[a("977.有序数组的平方")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#思路"},{default:s(()=>[a("思路")]),_:1})]),n("li",null,[t(o,{to:"#python代码"},{default:s(()=>[a("python代码")]),_:1})])])]),n("li",null,[t(o,{to:"#_209-长度最小的子数组"},{default:s(()=>[a("209.长度最小的子数组")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#思路-1"},{default:s(()=>[a("思路")]),_:1})]),n("li",null,[t(o,{to:"#python代码-1"},{default:s(()=>[a("python代码")]),_:1})])])]),n("li",null,[t(o,{to:"#_59-螺旋矩阵ii"},{default:s(()=>[a("59.螺旋矩阵II")]),_:1}),n("ul",null,[n("li",null,[t(o,{to:"#思路-2"},{default:s(()=>[a("思路")]),_:1})]),n("li",null,[t(o,{to:"#python代码-2"},{default:s(()=>[a("python代码")]),_:1})])])])])])]),y,n("blockquote",null,[n("p",null,[n("a",g,[a("力扣题目链接"),t(l)])])]),w,t(c,{id:"16",data:[{id:"示例 1："},{id:"示例 2："}],active:0,"tab-id":"txt"},{title0:s(({value:e,isActive:p})=>[a("示例 1：")]),title1:s(({value:e,isActive:p})=>[a("示例 2：")]),tab0:s(({value:e,isActive:p})=>[_]),tab1:s(({value:e,isActive:p})=>[f]),_:1}),x,n("blockquote",null,[n("p",null,[n("a",j,[a("力扣题目链接"),t(l)])])]),q,t(c,{id:"76",data:[{id:"示例 1："},{id:"示例 2："}],active:0,"tab-id":"txt"},{title0:s(({value:e,isActive:p})=>[a("示例 1：")]),title1:s(({value:e,isActive:p})=>[a("示例 2：")]),tab0:s(({value:e,isActive:p})=>[I]),tab1:s(({value:e,isActive:p})=>[L]),_:1}),A,n("blockquote",null,[n("p",null,[n("a",T,[a("力扣题目链接"),t(l)])])]),S,t(c,{id:"140",data:[{id:"示例 1："},{id:"示例 2："}],active:0,"tab-id":"txt"},{title0:s(({value:e,isActive:p})=>[a("示例 1：")]),title1:s(({value:e,isActive:p})=>[a("示例 2：")]),tab0:s(({value:e,isActive:p})=>[C]),tab1:s(({value:e,isActive:p})=>[N]),_:1}),D])}const P=r(m,[["render",Z],["__file","day2.html.vue"]]),M=JSON.parse('{"path":"/algorithm/carl/day2.html","title":"Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II","lang":"zh-CN","frontmatter":{"title":"Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II","shortTitle":"Day2 数组","date":"2022-11-19T00:00:00.000Z","category":["算法"],"tag":["代码随想录"],"excerpt":"<br>","order":2,"prev":"day1","next":"day3","description":" 本文目录 977.有序数组的平方 力扣题目链接 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 思路 由于数组有序，负数平方之后可能成为最大数，所以平方后的最大值一定在数组的两端。 方法一：从中间向两边：找到正负分界点，然后分别向左向右遍历比较大小。 平方的特点是会把负数变成正数，所...","head":[["meta",{"property":"og:url","content":"https://findn.cn/algorithm/carl/day2.html"}],["meta",{"property":"og:site_name","content":"Find Notes"}],["meta",{"property":"og:title","content":"Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II"}],["meta",{"property":"og:description","content":" 本文目录 977.有序数组的平方 力扣题目链接 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 思路 由于数组有序，负数平方之后可能成为最大数，所以平方后的最大值一定在数组的两端。 方法一：从中间向两边：找到正负分界点，然后分别向左向右遍历比较大小。 平方的特点是会把负数变成正数，所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-28T12:54:08.000Z"}],["meta",{"property":"article:author","content":"三水"}],["meta",{"property":"article:tag","content":"代码随想录"}],["meta",{"property":"article:published_time","content":"2022-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-28T12:54:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day2 数组 | LeetCode 977.有序数组的平方 209.长度最小的子数组 59.螺旋矩阵II\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-28T12:54:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三水\\",\\"url\\":\\"https://sanshui.findn.cn/\\"}]}"]]},"headers":[{"level":2,"title":"977.有序数组的平方","slug":"_977-有序数组的平方","link":"#_977-有序数组的平方","children":[{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":3,"title":"python代码","slug":"python代码","link":"#python代码","children":[]}]},{"level":2,"title":"209.长度最小的子数组","slug":"_209-长度最小的子数组","link":"#_209-长度最小的子数组","children":[{"level":3,"title":"思路","slug":"思路-1","link":"#思路-1","children":[]},{"level":3,"title":"python代码","slug":"python代码-1","link":"#python代码-1","children":[]}]},{"level":2,"title":"59.螺旋矩阵II","slug":"_59-螺旋矩阵ii","link":"#_59-螺旋矩阵ii","children":[{"level":3,"title":"思路","slug":"思路-2","link":"#思路-2","children":[]},{"level":3,"title":"python代码","slug":"python代码-2","link":"#python代码-2","children":[]}]}],"git":{"createdTime":1669498063000,"updatedTime":1669640048000,"contributors":[{"name":"jackhanyuan","email":"jackhanyuan@foxmail.com","commits":2}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"algorithm/carl/day2.md","localizedDate":"2022年11月19日","autoDesc":true}');export{P as comp,M as data};
