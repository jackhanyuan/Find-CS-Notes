import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as d,c as k,b as n,d as t,w as a,e as s,f as u}from"./app-DicGJuUL.js";const m={},v={class:"hint-container tip"},h=n("p",{class:"hint-container-title"},"本文目录",-1),b={class:"table-of-contents"},g=n("h2",{id:"_704-二分查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_704-二分查找"},[n("span",null,"704. 二分查找")])],-1),y={href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。",-1),_=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [-1,0,3,5,9,12], target = 9
输出：4
解释：9 出现在 nums 中并且下标为 4
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-txr line-numbers-mode","data-ext":"txr","data-title":"txr"},[n("pre",{class:"language-txr"},[n("code",null,`输入：nums = [-1,0,3,5,9,12], target = 2
输出：-1
解释：2 不存在 nums 中因此返回 -1
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=u(`<h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h3><blockquote><p>使用二分法前提条件：</p></blockquote><ul><li>数组为有序数组</li><li>数组中无重复元素</li></ul><blockquote><p>边界问题</p></blockquote><p>首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种：</p><ul><li><p>左闭右闭</p><ul><li>查找范围在[left, right]区间，初值 <code>left, right=0, len(nums) - 1</code>。</li><li><code>while (left &lt;= right)</code> 要使用 &lt;= ，因为左闭右闭时，left == right是有意义的。</li><li><code>if (nums[mid] &gt; target)</code> right == mid - 1，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而right赋值为 mid - 1 时，查找范围刚好是[left, mid - 1]。</li></ul></li><li><p>左闭右开</p><ul><li>查找范围在[left, right)区间，初值 <code>left, right=0, len(nums)</code>。</li><li><code>while (left &lt; right)</code> 要使用 &lt; ，因为左闭右开时，<code>left == right</code>没有意义。</li><li><code>if (nums[mid] &gt; target)</code> right == mid，因为中间值大于target，那么接下来要查找的范围应该包含中间值左边的那个值，而 right 赋值为 mid 时，查找范围刚好是[left, mid - 1]。</li></ul></li></ul><blockquote><p>值溢出问题</p></blockquote><ul><li><code>mid = left + ((right - left) &gt;&gt; 1)</code> 与 <code>mid = (left + right) // 2</code> 计算结果一致，但当 left 和 right 很大的时候，前者可以防止溢出问题（python中整数对象是变长对象，所以不存在溢出问题），此外位运算速度比除法快。</li></ul><h3 id="python代码" tabindex="-1"><a class="header-anchor" href="#python代码"><span>python代码</span></a></h3><p>左闭右闭</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> left <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左闭右开</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> left <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-移除元素" tabindex="-1"><a class="header-anchor" href="#_27-移除元素"><span>27. 移除元素</span></a></h2>`,14),T={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[s("给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。"),n("br"),s(" 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。"),n("br"),s(" 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。")],-1),C=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt","data-title":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("h3",{id:"思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路-1"},[n("span",null,"思路")])],-1),N=n("li",null,"数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，要删除某个元素，后面的只能向前覆盖。",-1),D=n("code",null,"for i in range(length)",-1),S={href:"https://blog.csdn.net/zhimou/article/details/105537102",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[s("双指针（快慢指针法） "),n("ul",null,[n("li",null,"快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组。"),n("li",null,"慢指针：删除了目标值的新数组的下标，慢指针只有在快指针的值不为target的值时才移动。")])],-1),E=u(`<h3 id="python代码-1" tabindex="-1"><a class="header-anchor" href="#python代码-1"><span>python代码</span></a></h3><p>暴力解法 - python调库</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># nums[::-1]相当于生成一个新的迭代器，循环体内remove不影响这里num取数</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment"># 删除操作复杂度O(n)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴力解法 - 双循环</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># length记录新数组的长度</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>  <span class="token comment"># 这里不能用for循环，因为for i in range(length)中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span> <span class="token comment"># 判断是否等于val，相等进入第二重循环，不相等变量i加1继续执行第一重循环</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment"># 从i之后依次向前移一位</span>
                length <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 逻辑上删除了一个值，数组大小减1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">return</span> length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双指针法（快慢指针）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
                slow <span class="token operator">+=</span> <span class="token number">1</span>
            fast <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function Z(z,P){const l=i("router-link"),o=i("ExternalLinkIcon"),c=i("CodeTabs");return d(),k("div",null,[n("div",v,[h,n("nav",b,[n("ul",null,[n("li",null,[t(l,{to:"#_704-二分查找"},{default:a(()=>[s("704. 二分查找")]),_:1}),n("ul",null,[n("li",null,[t(l,{to:"#思路"},{default:a(()=>[s("思路")]),_:1})]),n("li",null,[t(l,{to:"#python代码"},{default:a(()=>[s("python代码")]),_:1})])])]),n("li",null,[t(l,{to:"#_27-移除元素"},{default:a(()=>[s("27. 移除元素")]),_:1}),n("ul",null,[n("li",null,[t(l,{to:"#思路-1"},{default:a(()=>[s("思路")]),_:1})]),n("li",null,[t(l,{to:"#python代码-1"},{default:a(()=>[s("python代码")]),_:1})])])])])])]),g,n("blockquote",null,[n("p",null,[n("a",y,[s("力扣题目链接"),t(o)])])]),f,t(c,{id:"16",data:[{id:"示例 1："},{id:"示例 2："}],active:0,"tab-id":"txt"},{title0:a(({value:e,isActive:p})=>[s("示例 1：")]),title1:a(({value:e,isActive:p})=>[s("示例 2：")]),tab0:a(({value:e,isActive:p})=>[_]),tab1:a(({value:e,isActive:p})=>[w]),_:1}),x,n("blockquote",null,[n("p",null,[n("a",T,[s("力扣题目链接"),t(o)])])]),L,t(c,{id:"132",data:[{id:"示例 1："},{id:"示例 2："}],active:0,"tab-id":"txt"},{title0:a(({value:e,isActive:p})=>[s("示例 1：")]),title1:a(({value:e,isActive:p})=>[s("示例 2：")]),tab0:a(({value:e,isActive:p})=>[C]),tab1:a(({value:e,isActive:p})=>[A]),_:1}),q,n("ul",null,[N,n("li",null,[s("暴力法 "),n("ul",null,[n("li",null,[s("双层循环 "),n("ul",null,[n("li",null,[s("注意：Python 中 "),D,s("中，i每次从迭代器中取数，循环体中改变i的值并不能改变下一次for循环中取到的i值，可以参考"),n("a",S,[s("这里"),t(o)]),s("。")])])])])]),j]),E])}const O=r(m,[["render",Z],["__file","day1.html.vue"]]),I=JSON.parse('{"path":"/algorithm/carl/day1.html","title":"Day1 数组 | LeetCode 704. 二分查找 27. 移除元素","lang":"zh-CN","frontmatter":{"title":"Day1 数组 | LeetCode 704. 二分查找 27. 移除元素","shortTitle":"Day1 数组","date":"2022-11-16T00:00:00.000Z","category":["算法"],"tag":["代码随想录"],"excerpt":"<br>","order":1,"prev":"./","next":"day2","description":"本文目录 704. 二分查找 力扣题目链接 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 思路 使用二分法前提条件： 数组为有序数组 数组中无重复元素 边界问题 首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种： 左...","head":[["meta",{"property":"og:url","content":"https://findn.cn/algorithm/carl/day1.html"}],["meta",{"property":"og:site_name","content":"Find Notes"}],["meta",{"property":"og:title","content":"Day1 数组 | LeetCode 704. 二分查找 27. 移除元素"}],["meta",{"property":"og:description","content":"本文目录 704. 二分查找 力扣题目链接 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 思路 使用二分法前提条件： 数组为有序数组 数组中无重复元素 边界问题 首先确定查找的时候是否包括数组左右两边的数字，通常分为以下2种： 左..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-28T12:54:08.000Z"}],["meta",{"property":"article:author","content":"三水"}],["meta",{"property":"article:tag","content":"代码随想录"}],["meta",{"property":"article:published_time","content":"2022-11-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-28T12:54:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day1 数组 | LeetCode 704. 二分查找 27. 移除元素\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-16T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-28T12:54:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三水\\",\\"url\\":\\"https://sanshui.findn.cn/\\"}]}"]]},"headers":[{"level":2,"title":"704. 二分查找","slug":"_704-二分查找","link":"#_704-二分查找","children":[{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":3,"title":"python代码","slug":"python代码","link":"#python代码","children":[]}]},{"level":2,"title":"27. 移除元素","slug":"_27-移除元素","link":"#_27-移除元素","children":[{"level":3,"title":"思路","slug":"思路-1","link":"#思路-1","children":[]},{"level":3,"title":"python代码","slug":"python代码-1","link":"#python代码-1","children":[]}]}],"git":{"createdTime":1669498063000,"updatedTime":1669640048000,"contributors":[{"name":"jackhanyuan","email":"jackhanyuan@foxmail.com","commits":4}]},"readingTime":{"minutes":4.62,"words":1385},"filePathRelative":"algorithm/carl/day1.md","localizedDate":"2022年11月16日","autoDesc":true}');export{O as comp,I as data};
