import{ac as r,G as k,H as v,F as n,N as s,ad as a,S as e,L as m,ae as u,V as i}from"./framework-ac3591f3.js";const b={},h={class:"custom-container tip"},x=n("p",{class:"custom-container-title"},"本文目录",-1),_={class:"table-of-contents"},f=n("h2",{id:"_203-移除链表元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_203-移除链表元素","aria-hidden":"true"},"#"),e(" 203.移除链表元素")],-1),y={href:"https://leetcode.cn/problems/remove-linked-list-elements/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。",-1),w=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：head = [1,2,6,3,4,5,6], val = 6
输出：[1,2,3,4,5]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：head = [7,7,7,7], val = 7
输出：[]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=u(`<h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>在单链表中 删除头结点 和 删除其他结点 的操作方式是不一样（删除其他结点时，都是通过该结点的前一个结点来删除该节点）。</p><blockquote><p>设置虚拟头结点来统一删除操作</p></blockquote><ul><li>这样删除头结点和中间结点就变得统一起来，不用分情况讨论。</li></ul><h3 id="python代码" tabindex="-1"><a class="header-anchor" href="#python代码" aria-hidden="true">#</a> python代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode:</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token operator">=</span>head<span class="token punctuation">)</span>  <span class="token comment"># 设置一个虚拟头节点dummy_head，这样删除头结点和中间结点就变得统一起来，不用分情况讨论。</span>
        cur <span class="token operator">=</span> dummy_head  <span class="token comment"># 当前指针指向dummy_head（因为删除节点时，必须知道前一个节点的信息）</span>

        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>  <span class="token comment"># 比较值得时候需要cur.next.val，所以cur 和 cur.next 必须有意义（不为空）</span>
            <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>  <span class="token comment"># 只要满足条件，就执行删除操作</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span>  cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 删除cur.next节点</span>

            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># cur向后移动</span>
        
        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_707-设计链表" tabindex="-1"><a class="header-anchor" href="#_707-设计链表" aria-hidden="true">#</a> 707.设计链表</h2>`,7),A={href:"https://leetcode.cn/problems/design-linked-list/",target:"_blank",rel:"noopener noreferrer"},I=u(`<p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><div class="custom-container info"><p class="custom-container-title">示例：</p><p>MyLinkedList linkedList = new MyLinkedList(); linkedList.addAtHead(1); linkedList.addAtTail(3); linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3 linkedList.get(1); //返回2 linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3 linkedList.get(1); //返回3</p></div><h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1" aria-hidden="true">#</a> 思路</h3><p>实现单向链表，即每个节点仅存储本身的值和后继节点。除此之外，我们还需要一个虚拟头结点作为头结点，和一个 length 参数保存有效节点数。</p><blockquote><p>单链表实现</p></blockquote><ul><li>初始化一个虚拟头节点，方便链表增删操作</li><li>实现 addAtHead(val) 和addAtTail(val) 时，可以借助 addAtIndex(index, val) 来实现</li></ul><h3 id="python代码-1" tabindex="-1"><a class="header-anchor" href="#python代码-1" aria-hidden="true">#</a> python代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>

<span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 初始化链表</span>
        self<span class="token punctuation">.</span>dummy_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 虚拟头节点，方便链表增删操作</span>
        self<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前链表的长度，链表长度为n的时候，index为0 ~ (n-1)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>length<span class="token punctuation">:</span>  <span class="token comment"># 先判断index是否有效，有效区间应该为[0, self.length -1]</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>

        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 查找时先走到索引为0的结点</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 当index为0时不进入for循环，所以后面直接返回cur.val</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>val

    <span class="token keyword">def</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  
        self<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token comment"># addAtHead相当于在index=0前添加结点</span>

    <span class="token keyword">def</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token comment"># addATail相当于在index=length前(最后一个结点后)添加结点</span>

    <span class="token keyword">def</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 如果index小于0，则在头部插入节点</span>
            index <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>length<span class="token punctuation">:</span>  <span class="token comment"># 插入的合法范围为[0, length]</span>
            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">,</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>length <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 更新size</span>

    <span class="token keyword">def</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span>  <span class="token number">0</span> <span class="token operator">&lt;=</span> index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length<span class="token punctuation">:</span>  <span class="token comment"># 删除的合法范围为[0, length-1]</span>
            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            self<span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 更新size</span>

<span class="token comment"># Your MyLinkedList object will be instantiated and called as such:</span>
<span class="token comment"># obj = MyLinkedList()</span>
<span class="token comment"># param_1 = obj.get(index)</span>
<span class="token comment"># obj.addAtHead(val)</span>
<span class="token comment"># obj.addAtTail(val)</span>
<span class="token comment"># obj.addAtIndex(index,val)</span>
<span class="token comment"># obj.deleteAtIndex(index)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_206-反转链表" tabindex="-1"><a class="header-anchor" href="#_206-反转链表" aria-hidden="true">#</a> 206.反转链表</h2>`,10),q={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。",-1),j=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：head = [1,2,3,4,5]
输出：[5,4,3,2,1]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-txt line-numbers-mode","data-ext":"txt"},[n("pre",{class:"language-txt"},[n("code",null,`输入：head = []
输出：[]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=u(`<h3 id="思路-2" tabindex="-1"><a class="header-anchor" href="#思路-2" aria-hidden="true">#</a> 思路</h3><blockquote><p>双指针遍历链表，依次改变链表的next指针的指向</p></blockquote><ul><li>初始值 <code>pre=None</code>，<code>cur=head</code>，结束条件 <code>cur != None</code></li></ul><h3 id="python代码-2" tabindex="-1"><a class="header-anchor" href="#python代码-2" aria-hidden="true">#</a> python代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        pre <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 因为链表反转后第一个节点head会指向None，所以pre初始值为None</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>  <span class="token comment"># 当cur为None的时候说明链表反转结束，返回pre</span>
            tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># tmp存储cur的下一个节点，防止链表丢失</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre  <span class="token comment"># 先更改cur.next，再向后移动pre和cur指针</span>
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> tmp  <span class="token comment"># cur不能指向cur.next，因为cur.next已经改变，所以指向tmp</span>
        
        <span class="token keyword">return</span> pre
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function C(M,E){const t=i("router-link"),p=i("ExternalLinkIcon"),d=i("CodeTabs");return k(),v("div",null,[n("div",h,[x,n("nav",_,[n("ul",null,[n("li",null,[s(t,{to:"#_203-移除链表元素"},{default:a(()=>[e("203.移除链表元素")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#思路"},{default:a(()=>[e("思路")]),_:1})]),n("li",null,[s(t,{to:"#python代码"},{default:a(()=>[e("python代码")]),_:1})])])]),n("li",null,[s(t,{to:"#_707-设计链表"},{default:a(()=>[e("707.设计链表")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#思路-1"},{default:a(()=>[e("思路")]),_:1})]),n("li",null,[s(t,{to:"#python代码-1"},{default:a(()=>[e("python代码")]),_:1})])])]),n("li",null,[s(t,{to:"#_206-反转链表"},{default:a(()=>[e("206.反转链表")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#思路-2"},{default:a(()=>[e("思路")]),_:1})]),n("li",null,[s(t,{to:"#python代码-2"},{default:a(()=>[e("python代码")]),_:1})])])])])])]),f,n("blockquote",null,[n("p",null,[n("a",y,[e("力扣题目链接"),s(p)])])]),g,s(d,{id:"16",data:[{title:"示例 1："},{title:"示例 2："}],active:0,"tab-id":"txt"},{tab0:a(({title:l,value:o,isActive:c})=>[w]),tab1:a(({title:l,value:o,isActive:c})=>[L]),_:1}),m(" more "),N,n("blockquote",null,[n("p",null,[n("a",A,[e("力扣题目链接"),s(p)])])]),I,n("blockquote",null,[n("p",null,[n("a",q,[e("力扣题目链接"),s(p)])])]),T,s(d,{id:"128",data:[{title:"示例 1："},{title:"示例 2："}],active:0,"tab-id":"txt"},{tab0:a(({title:l,value:o,isActive:c})=>[j]),tab1:a(({title:l,value:o,isActive:c})=>[H]),_:1}),V])}const S=r(b,[["render",C],["__file","day3.html.vue"]]);export{S as default};
